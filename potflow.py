"""
Function definitions for various potential flows
"""
import numpy as np
from matplotlib import pyplot as plt

def source(xs, ys, Sstr, X, Y):
    """
    Returns the velocity and stream function field generated by the source(s)
    
    Parameters
    ----------
    xs: Numpy column vector
         x-coordinates of the sources
    ys: Numpy column vector
         y-coordinates of the sources
    Sstr: Numpy column vector
           strengths of the sources
    X, Y: 2D np arrays
          grid generated by np.meshgrid( )         
    
    Returns
    -------
    u: 2D Numpy array of floats
       x-component of the velocity field
    v: 2D Numpy array of floats
       y-component of the velocity field
    psi: 2D np array of floats
       stream function field
    
    """
    
    # initialize u, v and psi
    u = np.zeros(np.shape(X))
    v = np.zeros(np.shape(X))
    psi = np.zeros(np.shape(X))     
    
    for i in range(0, np.shape(xs)[0]):
        
        # radial distance and angle from source
        r   = np.sqrt( (X - xs[i])**2 + (Y - ys[i])**2)
        theta = np.arctan2(Y - ys[i], X - xs[i])
        
        # velocity field
        u = u + 0.5 * Sstr[i] / (np.pi * r) * np.cos(theta) 
        v = v + 0.5 * Sstr[i] / (np.pi * r) * np.sin(theta)
    
        #stream function
        psi = psi + 0.5 * Sstr[i] / np.pi * np.arctan2((Y - ys[i]), (X - xs[i])) 
    
    return u, v, psi 

def vortex(xv, yv, Vstr, X, Y):
    """
    Returns the velocity and stream function field generated by the source
    
    Parameters
    ----------
    xv: 1D Numpy Array
         x-coordinates of the vortices
    yv: 1D Numpy array
         y-coordinate of the vortices
    Vstr: float
           strength of the vortices
    X, Y: 2D np arrays
          grid generated by np.meshgrid( )         
    
    Returns
    -------
    u: 2D Numpy array of floats
       x-component of the velocity field
    v: 2D Numpy array of floats
       y-component of the velocity field
    psi: 2D Numpy array of floats
       stream function field
    
    """
   # initialize u, v and psi
    u = np.zeros(np.shape(X))
    v = np.zeros(np.shape(X))
    psi = np.zeros(np.shape(X))
    
    for i in range(0, np.shape(xv)[0]):
       
        # radial distance and angle of grid points from vortex
        r = np.sqrt((X - xv[i])**2 + (Y - yv[i])**2)
        theta = np.arctan2(Y - yv[i], X - xv[i]) 
        
        V = Vstr[i] / (2 * np.pi * r) # vortex velocity
            
        # velocity field
        u = u + V * np.cos(theta + np.pi / 2)
        v = v + V * np.sin(theta + np.pi / 2)
         
         # stream function
        psi = psi + 0.5 * Vstr[i] / np.pi * np.log(r)
    
    return u, v, psi
