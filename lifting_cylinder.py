
"""
Lifting Cylinder
"""
import numpy as np
import math
from matplotlib import pyplot as plt


def vortex(xv, yv, Vstr, X, Y):
    """
    Returns the velocity and stream function field generated by the source
    
    Parameters
    ----------
    x_s: float
         x-coordinate of the source
    y_s: float
         y-coordinate of the source
    S_str: float
           strength of the source
    X, Y: 2D np arrays
          grid generated by np.meshgrid( )         
    
    Returns
    -------
    u: 2D Numpy array of floats
       x-component of the velocity field
    v: 2D Numpy array of floats
       y-component of the velocity field
    psi: 2D Numpy array of floats
       stream function field
    
    """
     
    # radial distance and angle of grid points from vortex
    r = np.sqrt((X - xv)**2 + (Y - yv)**2)
    theta = np.arctan2(Y - yv, X - xv) 
    
    V = - Vstr / (2 * np.pi * r) # vortex velocity
        
    # velocity field
    u = V * np.cos(theta + np.pi / 2)
    v = V * np.sin(theta + np.pi / 2)
     
     # stream function
    psi = 0.5 * Vstr / np.pi * np.log(r)
    
    return u, v, psi

def doublet(X, Y, xd, yd, d_str):
    """
    Returns velocity field and stream function generated by a doublet
    
    Parameters
    ----------
    X, Y: 2D Numpy array
          grid generated by numpy.meshgrid()
    xd, yd: float
           position of doublet
    d_str: float
    strength of doublet
    
    Returns
    -------
    u, v: 2D Numpy array
    velocity field
    psi: 2D Numpy array
    stream function
    """
    u = -0.5 * d_str / np.pi * ((X - xd)**2 - (Y - yd)**2) / ((X - xd)**2 + (Y - yd)**2)**2
    v = -0.5 * d_str / np.pi * 2 * (X - xd) * (Y-yd) / ((X-xd)**2 + (Y-yd)**2)**2
    psi = -0.5 * d_str / np.pi * (Y - yd) / ((X-xd)**2 + (Y-yd)**2)
    
    return u, v, psi

def freestream(U, aoa, X, Y):
    """
    Returns uniform flow velocity field and stream function
    
    Parameters
    ----------
    U: float
    uniform flow velocity
    aoa: float
    angle of attack
    X, Y: 2D Numpy array
    grid points
    
    Returns
    -------
    u, v: 2D Numpy arrays
    x and y direction velocity fields
    psi: 2D Numpy array of floats
       stream function field
    """
    
    u = U * np.cos(aoa) * np.ones(np.shape(X))
    v = U * np.sin(aoa) * np.ones(np.shape(X))
    psi = U * Y
    return u, v, psi

def cp_get(u, v, U):
    """
    Returns coefficient of pressure given velocity field
    
    Parameters
    ----------
    u, v: 2D Numpy array
    velocity field x and y components
    U: float
    free stream velocity
    
    Returns
    -------
    cp: 2D Numpy array
    pressure co-efficient field
    """
    V = np.sqrt(u**2 + v**2)
    cp = np.ones(np.shape(V)) - (V/U)**2
    return cp

#======== Flow over lifting cylinder ==============
    
# creating the grid
N = 200      # number of grid points in each direction
x_start, x_end = -2.0, 2.0
y_start, y_end = -1.0, 1.0
x = np.linspace(x_start, x_end, N)
y = np.linspace(y_start, y_end, N)
X, Y = np.meshgrid(x , y)

#--------- flow parameters----------------
xd, yd = 0.0, 0.0      # doublet location
d_str = 1.0            # double strength

U = 1.0                # free stream velocity
aoa = 0.0              # angle of attack

Vstr = 5.0             # vortex strength
xv, yv = 0.0, 0.0      # vortex location

R = math.sqrt(d_str/(2 * math.pi * U))

# velocity field
u = vortex(xv, yv, Vstr, X, Y)[0] + doublet(X, Y, xd, yd, d_str)[0] + freestream(U, aoa, X, Y)[0]
v = vortex(xv, yv, Vstr, X, Y)[1] + doublet(X, Y, xd, yd, d_str)[1] + freestream(U, aoa, X, Y)[1]

# stream function 
psi = vortex(xv, yv, Vstr, X, Y)[2] + doublet(X, Y, xd, yd, d_str)[2] + freestream(U, aoa, X, Y)[2]

# pressure coefficient
cp = cp_get(u, v, U)

# plot cylinder and streamlines
width = 10.0
height = 10.0 / (x_end - x_start) * (y_end - y_start)
plt.figure(figsize=[width, height])
plt.xlabel('x', fontsize=16), plt.ylabel('y', fontsize=16)
plt.xlim(x_start, x_end), plt.ylim(y_start, y_end)
plt.streamplot(X, Y, u, v, density = 3)
circle=plt.Circle((0,0), R, color='r', alpha=1, zorder=3)
plt.gcf().gca().add_artist(circle)

# analytic pressure coefficient
theta = np.linspace(0, 2*np.pi, 100)
u_theta = -2 * U * np.sin(theta) - Vstr / (2 * np.pi * R)
cp = 1 - (u_theta/ U)**2

# non lifting case for comparison
u_nolift = -2 * U * np.sin(theta)
cp_nolift = 1 - (u_nolift / U)**2

# plot pressure coefficients
plt.figure(), plt.grid(True)
plt.xlim(theta[0], theta[-1])
plt.xlabel('$ \\theta $', fontsize=18), plt.ylabel('$C_p $', fontsize=18)
plt.plot(theta, cp, linewidth=2)
plt.plot(theta, cp_nolift, linewidth=2)

